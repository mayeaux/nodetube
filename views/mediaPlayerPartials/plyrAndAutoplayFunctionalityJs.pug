script.
  /** functionality to skip forward automatically based on lastWatchedTime **/
  var lastWatchedTime = '#{lastWatchedTime && lastWatchedTime.secondsWatched}';

  var secondsToMoveFoward = '#{secondsToMoveForward}';

  var v = document.getElementsByTagName("video") && document.getElementsByTagName("video")[0];

  if(!v){
    v = document.getElementsByTagName("audio") && document.getElementsByTagName("audio")[0];
  }

  var movedForward = false;

  // this works properly because it runs right when the video has started
  v.addEventListener("playing", async function (event) {


    if (lastWatchedTime) {
      console.log('RUNNING LASST WATCHED');

      if(!movedForward ){
        player.currentTime = Number(lastWatchedTime)

        // save in memory that we've skipped forward
        movedForward = true;
      } else {
        console.log('already moved!');
      }
      console.log('DONE RUNNING!');

    }
  }, true);

  // TODO: set the lastWatchedTime to 0 when you finish a video/audio






  $('.no-user-comment-form').on('release click', function(event){
    event.preventDefault();
    // swal("Please register to leave a comment")

    return swal({
      text: "Please register to leave a comment",
      type: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Sign Up Now'
    }).then(function (result) {
      if (result.value) {
        window.location.href = "/signup";
      }
    })

  })

  function getParameterByName(name, url) {
    if (!url) url = window.location.href;
    name = name.replace(/[\[\]]/g, "\\$&");
    var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
      results = regex.exec(url);
    if (!results) return null;
    if (!results[2]) return '';
    return decodeURIComponent(results[2].replace(/\+/g, " "));
  }

  var sensitive = #{upload.sensitive}

  var autoplay = getParameterByName('autoplay');

  var autoplay;
  if(sensitive || autoplay == 'off'){
    autoplay = false;
  } else {
    autoplay = true;
  }

  console.log('should autoplay ' + autoplay)

  // if user had just uploaded it
  var dontAutoplayBasedOnUpload = "t" == window.getParameterByName("u");


  var viewsAmount = '#{upload.views}';

  viewsAmount = Number(viewsAmount);

  console.log(viewsAmount);

  const shouldNotAutoPlayBasedOnViews = viewsAmount < 5;

  console.log(shouldNotAutoPlayBasedOnViews);

  console.log(dontAutoplayBasedOnUpload)


  if (dontAutoplayBasedOnUpload && shouldNotAutoPlayBasedOnViews) {
    autoplay = false;
  } else {
    autoplay = true;
  }

  console.log('should autoplay ' + autoplay)


  // Available controls:
  /*
    controls: [
    'play-large', // The large play button in the center
    'restart', // Restart playback
    'rewind', // Rewind by the seek time (default 10 seconds)
    'play', // Play/pause playback
    'fast-forward', // Fast forward by the seek time (default 10 seconds)
    'progress', // The progress bar and scrubber for playback and buffering
    'current-time', // The current time of playback
    'duration', // The full duration of the media
    'mute', // Toggle mute
    'volume', // Volume control
    'captions', // Toggle captions
    'settings', // Settings menu
    'pip', // Picture-in-picture (currently Safari only)
    'airplay', // Airplay (currently Safari only)
    'download', // Show a download button with a link to either the current source or a custom URL you specify in your options
    'fullscreen', // Toggle fullscreen
    ];
  */
  // The order you pass them is the order they appear

  var plyr_options = {
    autoplay,
    clickToPlay: true,
    speed: {selected: 1, options: [0.5, 0.75, 1, 1.25, 1.5, 1.75, 2]},
    controls: ['play-large', 'play','progress', 'current-time', 'duration', 'rewind', 'fast-forward', 'mute', 'volume', 'settings', 'fullscreen', 'captions'],
    settings: ['speed', 'captions', 'quality', 'loop']
  };

  // Create the plyr instances - this defines players[0] as our primary player.
  var players = Plyr.setup("#media_player", plyr_options);

  var player = players[0];




  player.on('playing', function(){

    var width = (window.innerWidth > 0) ? window.innerWidth : screen.width;

    // only hide button if it's on desktop
    if(width > 900){
      $('button.plyr__control.plyr__control--overlaid').css('display', 'none');
    }

  })

  players[0].on('ready', function (event) {

    console.log(event);


    if(secondsToMoveFoward){
      player.currentTime = secondsToMoveFoward
    }

    console.log('last wached time');
    console.log(Number(lastWatchedTime))


    if(autoplay){
      var playPromise = player.play();

      //
      if (playPromise !== undefined) {

        // play promise is a thenable response, if it's not undefined
        // try and then it, and if not then log the error and try and plan again
        playPromise.then(function (event) {
          console.log('running thenable');
          console.log(event);
        }).catch(function (error) {// Auto-play was prevented

          console.log(error);
          console.log('autoplay was prevented try again');
          player.play();
        });

      }
    } else {
      console.log('dont run')



      var playPromise = player.pause();

      setTimeout(function(){
        player.pause()
      }, 150)
    }

    // disabling this play because it's playing on autoplay when uploading
    // players[0].play()

    // set video max-height to 620px
    // $('.display-element').css('max-height', '620px');
  });

  var savedMaxHeight = 0;
  var savedHeight = 0;

  players[0].on('enterfullscreen', function (event) {

    console.log('HEY SOMETHING!');

    // savedMaxHeight = $('.plyr').css('max-height')
    // savedHeight = $('.plyr').css('height')

    // console.log(savedMaxHeight)

    function addStyleAttribute($element, styleAttribute) {
      $element.attr('style', $element.attr('style') + '; ' + styleAttribute);
    }

    //addStyleAttribute($('.plyr'), 'max-height: 100vh !important');
    //addStyleAttribute($('.plyr'), 'height: 100vh !important');

    // remove video max-height

  });

  var alreadyMovedOnPlay = false;

  players[0].on('exitfullscreen', function (event) {
    // add max height
      //$('.plyr').css('max-height', savedMaxHeight)
      //$('.plyr').css('height', savedHeight)
  });

  $("[data-plyr=seek]").css('cursor','pointer')

  $("[data-plyr=volume]").css('cursor','pointer')
